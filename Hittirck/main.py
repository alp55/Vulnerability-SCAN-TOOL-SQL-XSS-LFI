from PyQt5 import QtCore, QtGui, QtWidgets
import whois,socket,signal,requests,sys
from wh import Ui_whoisorgu
from xss import Ui_xss
from sql import Ui_sql
from port import Ui_port
from lfi import Ui_lfi
from bs4 import BeautifulSoup as bs 
from urllib.parse import urljoin

class Ui_ana_from(object):
    
    
    def whoiswindow(self) :
        
        ip_text=str(self.ipsorgukutusu.text())
        
        
        
        if "/" in ip_text:
            sinifla=ip_text.split("/")
            sinifla=str(sinifla[2])
        else:
            sinifla=ip_text    
        if not "http" in ip_text:
            ozl=str("http://"+ip_text+"/")
           
        else:
    
            ozl=ip_text 

        
        
        
            


        

        self.portwindow=QtWidgets.QWidget()
        self.ui=Ui_port()
        self.ui.setupUi(self.portwindow)
        

        liste=[21,22,23,25,53,67,68,69,80,110,123,135,139,143,161,443,445,993,995,1433,1723,3306,3389,5900,8080]
        
        socket.setdefaulttimeout(0.5)
        i=0
        for port in liste:
            sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            
            result=sock.connect_ex((sinifla,port))

            if result==0:
                text_port=("{}. PORT AÇIK".format(port))
                self.ui.listWidget.insertItem(i,text_port)
                
            else:
                text_port=("{}. PORT KAPALI".format(port))
                self.ui.listWidget.insertItem(i,text_port)
            i+=1

        self.portwindow.show()

        self.whowindow=QtWidgets.QWidget()
        self.ui=Ui_whoisorgu()
        self.ui.setupUi(self.whowindow)

        
        b=socket.gethostbyname(sinifla)
        w=whois.whois(sinifla)      
        w=str(w)
        self.ui.ipyazdir.setText(b)
        
        self.ui.listWidget.insertItem(0,w)
                  
        self.whowindow.show()

    
        


        self.xsswindow=QtWidgets.QWidget()
        self.ui=Ui_xss()
        self.ui.setupUi(self.xsswindow)
       


        def get_all_forms(url):
            soup = bs(requests.get(url).content,"html.parser").find_all("form")
            return soup

        def get_forms_details(form):
            details = {}

            action = form.attrs.get("action").lower()
            method = form.attrs.get("method","get").lower()

            inputs = [] 
            for input_tag in form.find_all("input"):
                input_type = input_tag.attrs.get("type","text")
                input_name = input_tag.attrs.get("name")
                inputs.append({"type": input_type, "name":input_name})

            details["action"] = action 
            details["method"] = method
            details["inputs"] = inputs 

            return details 

        def submit_forms(form_details,url,value):

            target_url = urljoin(url,form_details["action"])

            inputs = form_details["inputs"]
            data  = {}

            for input in inputs:
                if input["type"] == "text" or input["type"] == "search":
                    input["value"] = value 
                    input_name = input.get("name")
                    input_value = input.get("value")
                    if input_name and input_value : 
                        data[input_name] = input_value 
                    if form_details["method"] == "post":
                        return requests.post(target_url,data=data)
                    else:
                        return requests.get(target_url,params=data)

        def scan_xss (url):
            forms = get_all_forms(url)
            
            js_script = "<script>alert('hi')</script>"
            is_vulnerable = False 
            for form in forms: 
                form_details = get_forms_details(form)
                content = submit_forms(form_details,url,js_script).content.decode('latin-1')
                if  js_script in content:
                    self.ui.xss_buton.setStyleSheet('background-color: red')
                    is_vulnerable = True
                else:
                    self.ui.xss_buton.setStyleSheet('background-color: green')
            return is_vulnerable 

        
        url = ozl
        is_vulnerable = scan_xss(url)
                
        

        
        self.xsswindow.show()

        self.sqlwindow=QtWidgets.QWidget()
        self.ui=Ui_sql()
        self.ui.setupUi(self.sqlwindow)

        zorlayici="'"
       
        first=requests.post(ozl+zorlayici)
        if "mysql" in first.text.lower():
            self.ui.sql_buton.setStyleSheet('background-color: red')
            
            
        else :

                self.ui.sql_buton.setStyleSheet('background-color: green')


        
        self.sqlwindow.show()
        
        def signal_handler(signal, frame):

            exit()
       

        self.lfiwindow=QtWidgets.QWidget()
        self.ui=Ui_lfi()
        self.ui.setupUi(self.lfiwindow)
        signal.signal(signal.SIGINT, signal_handler)
        url=ozl

        f=open('lfi.txt','r')
        for i in f.readlines():

            ur=requests.get(url+'{}'.format(i))
            if "root" in str(ur.content):
        
                self.ui.lfi_buton.setStyleSheet('background-color: red')
            else :
                self.ui.lfi_buton.setStyleSheet('background-color: green')

        self.lfiwindow.show()




    def setupUi(self, ana_from):
        ana_from.setWindowIcon(QtGui.QIcon('images/logo.png'))
        ana_from.setObjectName("ana_from")
        ana_from.resize(400, 181)
        ana_from.setMinimumSize(QtCore.QSize(400, 160))
        ana_from.setMaximumSize(QtCore.QSize(400, 200))
        ana_from.setStyleSheet("border-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.baslik_ana = QtWidgets.QLabel(ana_from)
        self.baslik_ana.setGeometry(QtCore.QRect(80, 10, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.baslik_ana.setFont(font)
        self.baslik_ana.setObjectName("baslik_ana")
        self.ipsorgukutusu = QtWidgets.QLineEdit(ana_from)
        self.ipsorgukutusu.setGeometry(QtCore.QRect(40, 50, 321, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.ipsorgukutusu.setFont(font)
        self.ipsorgukutusu.setStyleSheet("background-color: rgb(75, 75, 75);")
        self.ipsorgukutusu.setObjectName("ipsorgukutusu")
        self.sorgubutonu = QtWidgets.QPushButton(ana_from,clicked =lambda:self.whoiswindow())
        self.sorgubutonu.setGeometry(QtCore.QRect(120, 120, 161, 31))
        self.sorgubutonu.setStyleSheet("background-color: rgb(117, 117, 117);")
        self.sorgubutonu.setObjectName("sorgubutonu")
        self.label = QtWidgets.QLabel(ana_from)
        self.label.setGeometry(QtCore.QRect(290, 102, 101, 71))
        self.label.setPixmap(QtGui.QPixmap("images/temiz.png"))
        self.label.setText("")
        self.label.setObjectName("label")
        
        

        self.retranslateUi(ana_from)
        QtCore.QMetaObject.connectSlotsByName(ana_from)

    def retranslateUi(self, ana_from):
        _translate = QtCore.QCoreApplication.translate
        ana_from.setWindowTitle(_translate("ana_from", "Hitirck"))
        self.baslik_ana.setText(_translate("ana_from", "DOMAİN ADRESİ GİRİNİZ"))
        self.sorgubutonu.setText(_translate("ana_from", "SORGULA"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ana_from = QtWidgets.QWidget()
    ui = Ui_ana_from()
    ui.setupUi(ana_from)
    ana_from.show()
    sys.exit(app.exec_())
